import asyncio
import logging
import os
import tracemalloc

from dotenv import load_dotenv
from telethon import Button, TelegramClient, events, utils

load_dotenv()

API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
BOT_ID = BOT_TOKEN.split(":")[0]

ADMIN = "makehtml"

tracemalloc.start()
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.WARNING)
logger = logging.getLogger(__name__)

bot = TelegramClient(BOT_ID, API_ID, API_HASH)

first_line_buttons = [
    Button.text("üó∫ –ü—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫–∞", single_use=False),
    Button.text("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", single_use=False),
]

@bot.on(events.NewMessage(pattern="/start"))
async def start_handler(event: events.NewMessage.Event):
    markup = event.client.build_reply_markup(
        [
            first_line_buttons,
            [Button.text("‚ö†Ô∏è –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", single_use=True)],
        ],
    )

    sender = await event.get_sender()
    name = utils.get_display_name(sender)
    await event.respond(f"–ü—Ä–∏–≤–µ—Ç, {name}!\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –ú–∞—Å—Ç–µ—Ä-–ö–ª–∞—Å—Å–∞. –ú–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å /info —á—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    await event.respond("–í–∫–ª—é—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏...", link_preview=False, buttons=markup)

@bot.on(events.NewMessage(pattern=r"–±–æ—Ç (\w+)"))
async def answer(event: events.NewMessage.Event):
    if "–≤—Ä–µ–º—è" in event.pattern_match.search(".*–≤—Ä–µ–º—è.*"):
        print("–ü–æ–∫–∞–∑—ã–≤–∞—é –≤—Ä–µ–º—è")

@bot.on(events.NewMessage(pattern="/info"))
@bot.on(events.NewMessage(pattern="(?i).*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
async def info_handler(event: events.NewMessage.Event):
    await bot.send_message(
        event.chat_id, "–°–º–æ—Ç—Ä–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...",
    )
    sender = await event.get_sender()
    name = utils.get_display_name(sender)
    await bot.send_message(
        event.chat_id,
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\nID: {sender.id}\nusername: {sender.username}\nname: {name}\nphone: {sender.phone}",
    )
    await send_to_admin(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\nID: {sender.id}\nusername: {sender.username}\nname: {name}\nphone: {sender.phone}")

@bot.on(events.NewMessage(pattern="(?i).*–û—Ç–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"))
async def handle_disable_testing_command(event):
    markup = event.client.build_reply_markup(
        [
            first_line_buttons,
            [Button.text("‚ö†Ô∏è –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", single_use=True)],
        ],
    )

    await event.respond("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ", buttons=markup)

@bot.on(events.NewMessage(pattern="(?i).*–í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"))
async def handle_testing_command(event):
    markup = event.client.build_reply_markup(
        [
            first_line_buttons,
            [
                Button.request_location("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", single_use=True),
                Button.request_phone("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", single_use=True),
            ], [
                Button.text("‚ú® –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", single_use=True),
                Button.text("‚ö†Ô∏è –û—Ç–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", single_use=True),
            ],
        ],
    )
    await event.respond("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ", buttons=markup)

async def send_to_admin(txt):
    txt = f"[admin] {txt}"
    await bot.send_message(ADMIN, txt)

async def main():
    await bot.start(bot_token=BOT_TOKEN)
    await send_to_admin("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    await bot.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
